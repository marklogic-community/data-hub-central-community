buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.6.6"
		classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
	}
}

plugins {
	id 'com.marklogic.ml-development-tools' version '5.5.2'
	id 'org.springframework.boot' version '2.6.6'
}

apply plugin: "java"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.moowork.node"
apply plugin: 'idea'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext {
	taskGroup = "Envision UI"
}

bootJar {
	baseName = springBootJarName
	manifest {
    attributes(
			'Implementation-Title':   'Envision',
			'Implementation-Version': project.version
		)
  }
}

repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
}

ext.springVersion = '5.3.18'
ext.springSecurityVersion = '5.6.2'
ext.junitPlatformVersion = '1.8.2'
ext.junitJupiterVersion  = '5.8.2'

if (project.hasProperty("use-snapshot")) {
	if ("".equals(project.property("use-snapshot"))) {
		ext.dataHubVersion = "5.8-SNAPSHOT"
	} else {
		ext.dataHubVersion = project.property("use-snapshot") + "-SNAPSHOT"
	}
} else {
	ext.dataHubVersion = "5.8.1"
}

dependencies {
	implementation group: 'org.springframework', name: 'spring-web', version: springVersion
	implementation group: 'org.springframework', name: 'spring-webmvc', version: springVersion

	implementation group: 'org.springframework.security', name: 'spring-security-core', version: springSecurityVersion
	implementation group: 'org.springframework.security', name: 'spring-security-config', version: springSecurityVersion
	implementation group: 'org.springframework.security', name: 'spring-security-web', version: springSecurityVersion

	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-websocket"
	implementation "org.springframework.boot:spring-boot-starter-mail"

	// No idea why this is necessary, but when Gradle brings the core project over, it bumps the okhttp3 dependency
	// down from 4.4.0 to 3.x, which then breaks all kinds of stuff. So exclude the two okhttp3 dependencies and
	// then explicitly depending on the desired versions.
	implementation ("com.marklogic:marklogic-data-hub:" + dataHubVersion) {
		exclude group: "com.squareup.okhttp3", module: "okhttp"
		exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
	}

	// data-movement-components are no longer packaged with marklogic-data-hub
	implementation "com.marklogic:marklogic-data-movement-components:2.4.0"
	// jack-core and jackson-dataformat-csv are no longer packaged with marklogic-data-hub
	implementation 'com.fasterxml.jackson.core:jackson-core:2.13.2'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.2'

	implementation 'org.apache.commons:commons-collections4:4.4'

	// Depend on the versions that ML Java Client 5.3.0 depends on
	implementation "com.squareup.okhttp3:okhttp:4.7.2"
	implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"
	implementation "org.jetbrains.kotlin:kotlin-stdlib:1.6.10"

	implementation "com.marklogic:marklogic-spring-web:1.0"

	implementation 'org.apache.commons:commons-email:1.5'

	implementation 'org.apache.jena:jena-arq:3.17.0'
	implementation 'org.apache.jena:jena-core:3.17.0'
	implementation 'commons-codec:commons-codec:1.15'

	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

	testImplementation group: 'org.springframework', name: 'spring-test'
	testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
		exclude group : 'junit', module: 'junit'
		exclude group : 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation group: 'org.springframework.security', name: 'spring-security-test'

//	testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
	testImplementation "org.junit.platform:junit-platform-commons:${junitPlatformVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
	testRuntimeOnly "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"

	testImplementation 'org.skyscreamer:jsonassert:1.5.0'
	testImplementation 'org.xmlunit:xmlunit-core:2.9.0'
	testImplementation 'org.xmlunit:xmlunit-matchers:2.9.0'
	testImplementation 'org.easymock:easymock:4.3'
	testImplementation 'ch.qos.logback:logback-classic:1.2.11'
	testImplementation 'org.slf4j:log4j-over-slf4j:1.7.36'
	testImplementation "org.mockito:mockito-core:4.4.0"
	testImplementation "org.mockito:mockito-junit-jupiter:4.4.0"
}

processResources {
	filesMatching("**/version.properties") {
		expand(project: project)
	}
}

task installDependencies(type: NpmTask, group: taskGroup) {
	description = "Install UI dependencies before building the UI files"
	args = ["install"]
	execOverrides { it.workingDir = groveUiPath }
}

task buildUi(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
	environment = [ VUE_APP_ENVISION_VERSION: project.version ]
	description = "Builds the UI files so that they can be copied to the Spring Boot application"
	args = ["run", (project.ext.has("env") && project.ext.env == "cloud") ? "build:cloud" : "build"]
	execOverrides { it.workingDir = groveUiPath }
}

task runUi(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
	environment = [ VUE_APP_ENVISION_VERSION: project.version ]
	description = "Run the UI in debug mode"
	args = ["run", (project.ext.has("env") && project.ext.env == "cloud") ? "serve:cloud" : "serve"]
	execOverrides { it.workingDir = groveUiPath }
}

task testUi(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
	environment = [ VUE_APP_ENVISION_VERSION: project.version ]
	description = "Run the UI tests"
	args = ["run", "test:e2e"]
	execOverrides { it.workingDir = groveUiPath }
}

task testUiBuild(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
	environment = [ VUE_APP_ENVISION_VERSION: project.version ]
	description = "Run the UI tests"
	args = ["run", "test:e2e:headless"]
	execOverrides { it.workingDir = groveUiPath }
}

task deleteSpringBootUiFiles(type: Delete, group: taskGroup) {
	description = "Delete the UI files that may have already been copied over to the Spring Boot UI directory"
	delete springBootUiPath
}

task copyUiFiles(type: Copy, dependsOn: deleteSpringBootUiFiles, group: taskGroup) {
	description = "Copies the UI files to a directory where Spring Boot will include them in the executable bootJar file"
	from groveUiPath + "/dist"
	into springBootUiPath
}

// Before the Spring Boot jar is built, build the UI files and copy them over
build.dependsOn buildUi

if (!(
  gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("test")
)
) {
	processResources.dependsOn copyUiFiles
	copyUiFiles.mustRunAfter buildUi
}

clean.dependsOn deleteSpringBootUiFiles

springBoot {
	// not in spring boot 2 executable = true
	mainClass = "com.marklogic.grove.boot.Application"
}


task generateEntitySearcher(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/search/service.json'
}

task generateEntityModeller(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/model/service.json'
}

task generateMastering(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/mastering/service.json'
}

task generateTripleBrowser(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/triples/service.json'
}

task generateSystemUtils(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/system/service.json'
}

task generateFlows(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/flows/service.json'
}

task generateUsers(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/users/service.json'
}

task generateJobs(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/envision-modules/root/envision/jobs/service.json'
}

task makeServices {
	dependsOn generateEntitySearcher
	dependsOn generateEntityModeller
	dependsOn generateMastering
	dependsOn generateTripleBrowser
	dependsOn generateSystemUtils
	dependsOn generateFlows
	dependsOn generateUsers
}

bootRun {
	systemProperties = System.properties
}

test {
	useJUnitPlatform()
	systemProperties = System.properties
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
}
